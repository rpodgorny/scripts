#!/usr/bin/python3

import os
import subprocess
import glob
import socket


def call(cmd, silent=False):
	if not silent:
		print('>>> %s' % cmd)
		stdout = None
	else:
		stdout = subprocess.DEVNULL
	return subprocess.call(cmd, shell=True, stdout=stdout)


def ask(question):
	res = input(question)
	if res == 'y':
		return True
	return False


# TODO: this is probably unused
def is_virtual_machine():
	return call('systemd-detect-virt -q') == 0


def is_package_installed(package):
	try:
		subprocess.check_output('pacman -Qi %s' % package, shell=True, stderr=subprocess.PIPE)
		return True
	except:
		return False


def fix_mkinitcpio():
	fn = '/etc/mkinitcpio.conf'
	if not os.path.isfile(fn):
		return
	if call('grep "^HOOKS=.*autodetect.*" %s' % fn, silent=True) != 0:
		return
	if not ask('fix mkinitcpio (remove autodetect hook)?'):
		return
	call('sed -e "/^HOOKS=/s/autodetect //g" -i %s' % fn)
	call('mkinitcpio -p linux')


def fix_locale_gen():
	fn = '/etc/locale.gen'
	if call('grep "^#en_US.UTF-8" %s' % fn, silent=True) != 0:
		return
	if not ask('fix locale.gen? (en_US.UTF-8)'):
		return
	call('sed -e "s/^#en_US.UTF-8/en_US.UTF-8/g" -i %s' % fn)
	call('locale-gen')


def fix_locale():
	fn = '/etc/locale.conf'
	if os.path.isfile(fn):
		return
	if not ask('fix locale.conf? (en_US.UTF-8)'):
		return
	call('echo "LANG=en_US.UTF-8\nLC_ALL=en_US.UTF-8\n" > %s' % fn)


def fix_radek():
	if call('grep "^radek:" /etc/passwd', silent=True) != 0:
		if not ask('add user radek?'):
			return
		call('useradd -m radek')
		call('passwd radek')
		call('pacman -Sy --noconfirm --needed sudo')
		call('usermod -aG wheel radek')

	if call('grep "^radek:" /etc/passwd | grep /usr/bin/fish', silent=True) != 0:
		if ask('set fish as default shell for radek?'):
			call('pacman -Sy --noconfirm --needed fish')
			call('usermod -s /usr/bin/fish radek')

	fn = '/home/radek/.forward'
	if not os.path.exists(fn):
		if ask('add .forward to radek@podgorny.cz for radek?'):
			call('echo "radek@podgorny.cz" > %s' % fn)


def fix_root():
	fn = '/root/.forward'
	if not os.path.exists(fn):
		if ask('add .forward to radek@podgorny.cz for root?'):
			call('echo "radek@podgorny.cz" > %s' % fn)


def fix_packages():
	for p in ['cronie', 'git', 'haveged', ('openssh', 'openssh-hpn', 'openssh-hpn-git'), 'postfix', 'uptimed', ]:
		installed = any(map(is_package_installed, p)) if isinstance(p, tuple) else is_package_installed(p)
		if installed:
			continue
		if isinstance(p, tuple):
			p = p[0]  # TODO: quick hack
		if not ask('install %s?' % p):
			continue
		call('pacman -Sy --noconfirm %s' % p)


def fix_services():
	for s in ['cronie', 'haveged', 'sshd', 'postfix', 'systemd-networkd', 'systemd-resolved', 'uptimed', ]:
		if os.path.islink('/etc/systemd/system/multi-user.target.wants/%s.service' % s):
			continue
		if not ask('enable and start %s?' % s):
			continue
		call('systemctl enable --now %s.service' % s)


def fix_mcelog():
	if not os.path.isfile('/dev/mcelog'):
		return
	if not is_package_installed('mcelog'):
		if ask('install mcelog?'):
			call('pacman -Sy --noconfirm mcelog')
	if not os.path.islink('/etc/systemd/system/multi-user.target.wants/mcelog.service'):
		if ask('enable and start mcelog?'):
			call('systemctl enable --now mcelog.service')


def fix_systemd_check_failed():
	if not is_package_installed('systemd-check-failed'):
		if ask('install systemd-check-failed?'):
			call('pacman -Sy --noconfirm systemd-check-failed')
	if not os.path.islink('/etc/systemd/system/multi-user.target.wants/systemd-check-failed.service'):
		if ask('enable and start systemd-check-failed?'):
			call('systemctl enable --now systemd-check-failed.service')


def fix_getty1():
	if os.path.islink('/etc/systemd/system/getty.target.wants/getty@tty2.service'):
		return
	if not ask('fix getty1 (should be getty2) symlink?'):
		return
	call('mv /etc/systemd/system/getty.target.wants/getty@tty1.service /etc/systemd/system/getty.target.wants/getty@tty2.service')


def fix_sshd_permit_root_login():
	fn = '/etc/ssh/sshd_config'
	if call('grep "^#PermitRootLogin" %s' % fn, silent=True) == 0:
		return
	print('PermitRootLogin not disabled in %s' % fn)


def fix_pacman_sources():
	fn = '/etc/pacman.conf'
	if call('grep "^\[rpodgorny\]$" %s' % fn, silent=True) == 0:
		return
	if not ask('add rpodgorny repo to pacman.conf?'):
		return
	call('''echo "

[rpodgorny]
SigLevel = Never
Server = http://archlinux.podgorny.cz/\$repo/os/\$arch" >> %s''' % fn)


def fix_timezone():
	fn = '/etc/localtime'
	if os.path.islink(fn):
		return
	if not ask('set timezone to Europe/Prague?'):
		return
	call('ln -s /usr/share/zoneinfo/Europe/Prague %s' % fn)


def fix_hostname():
	fn = '/etc/hostname'
	if os.path.isfile(fn):
		return
	if not ask('set hostname?'):
		return
	hostname = None
	while not hostname:
		hostname = input('enter hostname: ').strip()
	call('echo "%s" > %s' % (hostname, fn))


def fix_x():
	# TODO: find a better way to test for X
	if not os.path.isfile('/usr/bin/X'):
		return
	if is_package_installed('terminus-font'):
		return
	if not ask('install terminus font?'):
		return
	call('pacman -Sy terminus-font')


def fix_fstrim():
	if os.path.islink('/etc/systemd/system/timers.target.wants/fstrim.timer'):
		return
	if not ask('enable and start fstrim timer?'):
		return
	call('systemctl enable --now fstrim.timer')


def fix_backup():
	if os.path.islink('/etc/systemd/system/timers.target.wants/borg-backup.timer'):
		return
	print('no backup set up')


def fix_nginx():
	fn = '/etc/nginx/nginx.conf'
	if not os.path.isfile(fn):
		return
	if call('grep "ssl_protocols TLSv1 TLSv1.1 TLSv1.2;" %s' % fn, silent=True) == 0:
		return
	print('%s found but sslv3 seems to be not disabled' % fn)


def fix_ntp_sync():
	if call('timedatectl | grep "synchronized: yes"', silent=True) != 0:
		print('time not synced with ntp')
	if not os.path.islink('/etc/systemd/system/sysinit.target.wants/systemd-timesyncd.service'):
		if ask('enable systemd and start systemd-timesyncd?'):
			call('systemctl enable --now systemd-timesyncd')


def fix_ssh_host_keys_hostname():
	deleted = False
	should_be = 'root@%s' % socket.gethostname()
	fns = glob.glob('/etc/ssh/*_key.pub')
	for fn in fns:
		with open(fn, 'r') as f:
			user_and_host = f.readline().split()[-1]
		if user_and_host != should_be:
			print('i dont like %s in ssh host key in %s' % (user_and_host, fn))
			if ask('delete?'):
				os.remove(fn)
				deleted = True
	if deleted:
		call('systemctl start sshdgenkeys')


def fix_ssh_user_keys_hostname():
	fns = glob.glob('/home/*/.ssh/id_rsa.pub')
	for fn in fns:
		user = fn.split('/')[2]
		should_be = '%s@%s' % (user, socket.gethostname())
		with open(fn, 'r') as f:
			user_and_host = f.readline().split()[-1]
		if user_and_host != should_be:
			print('i dont like %s in ssh user key in %s' % (user_and_host, fn))
	fns = glob.glob('/root/.ssh/id_rsa.pub')
	for fn in fns:
		user = 'root'
		should_be = '%s@%s' % (user, socket.gethostname())
		with open(fn, 'r') as f:
			user_and_host = f.readline().split()[-1]
		if user_and_host != should_be:
			print('i dont like %s in ssh user key in %s' % (user_and_host, fn))


def fix_ssh_user_keys_wrong_type():
	fns = glob.glob('/home/*/.ssh/id_*')
	for fn in fns:
		if 'rsa' in fn:
			continue
		print('wrong ssh key found at %s' % fn)
	fns = glob.glob('/root/.ssh/id_*')
	for fn in fns:
		if 'rsa' in fn:
			continue
		print('wrong type ssh user key found at %s' % fn)


def fix_ssh_root_authorized_keys():
	if not os.path.isfile('/root/.ssh/authorized_keys'):
		return
	print('/root/.ssh/authorized_keys exists')


def fix_postfix():
	if call('grep "^inet_protocols = ipv4,ipv6$" /etc/postfix/main.cf', silent=True) == 0:
		return
	if call('grep "^inet_protocols = ipv4$" /etc/postfix/main.cf', silent=True) != 0:
		print('"^inet_protocols = ipv4$" not found in /etc/postfix/main.cf, this is weird')
		return
	if ask('ipv6 not set for postfix. fix?'):
		call('sed -i "s/^inet_protocols = ipv4$/inet_protocols = ipv4,ipv6/g" /etc/postfix/main.cf')


def fix_watchdog():
	if not os.path.isfile('/dev/watchdog'):
		return
	if call('grep "#RuntimeWatchdogSec" /etc/systemd/system.conf', silent=True) == 0:
		print('watchdog does not seem to enabled')


def check_kernel():
	ver = subprocess.check_output('uname -r', shell=True).decode().strip()
	if os.path.isdir('/lib/modules/%s' % ver):
		return
	print('running old kernel, reboot recommended!')


def check_ucode():
	for fn in glob.glob('/boot/loader/entries/*.conf'):
		if call('grep ucode %s' % fn, silent=True) != 0:
			print('ucode does not seem to enabled for %s' % fn)


def main():
	fix_mkinitcpio()
	fix_hostname()
	fix_timezone()
	fix_locale_gen()
	fix_locale()
	fix_pacman_sources()
	fix_packages()
	fix_services()
	fix_getty1()
	fix_ssh_host_keys_hostname()
	fix_ssh_user_keys_hostname()
	fix_ssh_user_keys_wrong_type()
	fix_ssh_root_authorized_keys()
	fix_sshd_permit_root_login()
	fix_postfix()
	fix_nginx()
	fix_fstrim()
	fix_backup()
	fix_root()
	fix_radek()
	fix_x()
	fix_ntp_sync()
	fix_watchdog()
	fix_mcelog()
	fix_systemd_check_failed()
	check_kernel()
	check_ucode()


if __name__ == '__main__':
	main()

