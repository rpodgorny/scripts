#!/bin/sh
#_(
  DEPS=''
  _OPTS='-J-Xms128m -J-Xmx128m -J-client'
  OPTS='-J-XX:NativeMemoryTracking=summary'
  exec clojure $OPTS -Sdeps "$DEPS" "$0" "$@"
)

(ns autovpn.core
  (:require [clojure.string :as str]
            [clojure.java.shell :as sh]))


(def IFACE "wlan0")
(def WG-IFACE "wg0")
(def VPN "asterix")
(def SLEEP 10)

(defn openvpn-active? [vpn]
  (let [cmd (sh/sh "systemctl" "is-active" (format "openvpn-client@%s.service" vpn))]
    (= (:exit cmd) 0)))

(defn wireguard-active? [wg-iface]
  (let [cmd (sh/sh "systemctl" "is-active" (format "wg-quick@%s.service" wg-iface))]
    (= (:exit cmd) 0)))

(defn start-stop-openvpn [vpn action]
  (println "openvpn" action)
  (sh/sh "systemctl" action (format "openvpn-client@%s.service" vpn)))

(defn start-stop-wireguard [wg-iface action]
  (println "wireguard" action)
  (sh/sh "systemctl" action (format "wg-quick@%s.service" wg-iface)))

(defn cut-iface [line]
  (str/trim (second (str/split line #":"))))

(defn cut-addr [line]
  (second (str/split (str/trim line) #" ")))

(defn is-line-with-addr [line cur-iface]
  (and cur-iface (str/includes? line "inet6")))

(defn is-line-with-iface [line]
  (str/includes? line "mtu"))

(defn get-ipv6-addrs []
  (let [cmd (sh/sh "ip" "addr")
        lines (str/split (:out cmd) #"\n")]
    (defn parse [lines cur-iface res]
      (if (empty? lines)
        res
        (if (is-line-with-iface (first lines))
          (let [iface (cut-iface (first lines))
                res (assoc res iface #{})]
            (parse (rest lines) iface res))
          (let [res (if (is-line-with-addr (first lines) cur-iface)
                      (update-in res [cur-iface] conj (cut-addr (first lines)))
                      res)]
            (parse (rest lines) cur-iface res)))))
    (parse lines nil {})))

(defn public-addr-new? [addr]
  (let [host (first (str/split addr #"/"))]
    (not (or (str/starts-with? host "fd")
	         (str/starts-with? host "fe")))))

(defn public-addr? [addr]
  (str/starts-with? addr "2"))

(defn tick [iface vpn wg-iface]
  (let [addrs (get-ipv6-addrs)
        has-public-addr (some public-addr? (get addrs iface))
        ;;vpn-active (openvpn-active? vpn)]
        vpn-active (wireguard-active? wg-iface)]
    ;;;(println ["tick" addrs has-public-addr vpn-active])
    ;(cond
    ;  (and has-public-addr vpn-active) (start-stop-openvpn vpn "stop")
    ;  (and (not has-public-addr) (not vpn-active)) (start-stop-openvpn vpn "start"))))
    (cond
      (and has-public-addr vpn-active) (start-stop-wireguard wg-iface "stop")
      (and (not has-public-addr) (not vpn-active)) (start-stop-wireguard wg-iface "start"))))

(defn sleep [s]
  (Thread/sleep (* s 1000)))

(defn -main [& args]
  (println "starting autovpn")
  (while 1
    (tick IFACE VPN WG-IFACE)
    (sleep SLEEP))
  (println "exit"))

(-main)
