#!/usr/bin/python3

import sys
import subprocess


def run(cmd):
	print('+ %s' % cmd)
	return subprocess.call(cmd, shell=True)


def main():
	dev = sys.argv[1]
	name = sys.argv[2]
	assert dev
	assert name

	part_boot = '%s%s1' % (dev, 'p' if 'nvme' in dev or 'mmcblk' in dev else '')
	part_swap = '%s%s2' % (dev, 'p' if 'nvme' in dev or 'mmcblk' in dev else '')
	part_root = '%s%s3' % (dev, 'p' if 'nvme' in dev or 'mmcblk' in dev else '')
	#assert run('test -b %s' % dev) == 0
	#for part in [part_boot, part_swap, part_root]:
	#	assert run('test ! -b %s' % part) != 0

	run('dd if=/dev/zero of=%s bs=10M count=1' % dev)

	run('partprobe')

	swap_size_gb = 1

	run('parted --script -a optimal %s -- mklabel gpt mkpart primary fat32 0%% 1GB mkpart primary linux-swap 1GB %dGB mkpart primary btrfs %dGB 100%% set 1 boot on' % (dev, (1 + swap_size_gb), (1 + swap_size_gb)))
	#run('parted --script -a optimal %s -- mklabel gpt mkpart primary fat32 0%% 1GB mkpart primary linux-swap 1GB %dGB mkpart primary xfs %dGB 100%% set 1 boot on' % (dev, (1 + swap_size_gb), (1 + swap_size_gb)))

	run('mkfs.vfat -n %s_BOOT %s' % (name.upper(), part_boot))
	run('mkswap -L SWAP %s' % part_swap)
	run('mkfs.btrfs -f -L %s_ROOT %s' % (name.upper(), part_root))
	#run('mkfs.xfs -f -L %s_ROOT %s' % (name.upper(), part_root))

	run('mount -o relatime,compress=zstd %s3 /mnt' % dev)
	#run('mount %s /mnt' % part_root)
	run('mkdir /mnt/boot')
	run('mount %s /mnt/boot' % part_boot)

	run('pacstrap /mnt base linux linux-firmware openssh intel-ucode btrfs-progs')
	#run('pacstrap /mnt base linux linux-firmware openssh intel-ucode xfsprogs')

	run('arch-chroot /mnt bootctl install')

	run('arch-chroot /mnt mkdir -p /boot/loader/entries')
	s = '''title   Arch Linux
linux   /vmlinuz-linux
initrd  /intel-ucode.img
initrd  /initramfs-linux.img
options root=/dev/disk/by-label/%s_ROOT rw''' % name.upper()
	with open('/mnt/boot/loader/entries/arch.conf', 'w') as f:
		f.write(s)

	with open('/mnt/etc/hostname', 'w') as f:
		f.write(name)

	s = '''[Match]
Name=en*

[Network]
DHCP=yes'''
	with open('/mnt/etc/systemd/network/en.network', 'w') as f:
		f.write(s)

	run('arch-chroot /mnt timedatectl set-timezone Europe/Prague')

	run('arch-chroot /mnt systemctl enable systemd-networkd')
	run('arch-chroot /mnt systemctl enable systemd-resolved')
	run('arch-chroot /mnt systemctl enable systemd-timesyncd')
	run('arch-chroot /mnt systemctl enable sshd')

	run('cp ~/scripts/fix_system /mnt/')
	#run('arch-chroot /mnt pacman -Syu --noconfirm python')
	run('pacstrap /mnt python')
	run('arch-chroot /mnt /fix_system')
	run('rm /mnt/fix_system')

	run('arch-chroot /mnt pacman -Scc --noconfirm')
	run('umount -R /mnt')
	return 0


if __name__ == '__main__':
	sys.exit(main())
