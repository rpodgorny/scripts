#!/usr/bin/python3

import sys
import subprocess
import time


# first item is default
TARGS = ['max', 'fix', 'min', 'mid']


def try_read(fn):
	try:
		with open(fn, 'r') as f:
			return f.read()
	except:
		return None


def try_int(v):
	try:
		return int(v)
	except:
		return None


def toggle(fn):
	targ = try_read(fn)
	if not targ or targ not in TARGS:
		targ = TARGS[0]
	else:
		idx = TARGS.index(targ)
		targ = TARGS[(idx + 1) % len(TARGS)]
	with open(fn, 'w') as f:
		f.write(targ)
	return targ


def main():
	fn = '/tmp/cpu_freq_crop'
	if len(sys.argv) >= 2 and sys.argv[1] == 'toggle':
		toggle(fn)
		return 0
	freq_min = try_int(try_read('/sys/devices/system/cpu/cpufreq/policy0/cpuinfo_min_freq'))
	freq_max = try_int(try_read('/sys/devices/system/cpu/cpufreq/policy0/cpuinfo_max_freq'))
	freq_map = {
		'max': (freq_min, freq_max),
		'fix': (1800000, 1800000),
		'min': (freq_min, freq_min),
		'mid': (freq_min, 1800000),
	}
	while 1:
		cur_min = try_int(try_read('/sys/devices/system/cpu/cpufreq/policy0/scaling_min_freq'))
		cur_max = try_int(try_read('/sys/devices/system/cpu/cpufreq/policy0/scaling_max_freq'))
		targ = try_read(fn)
		if not targ:
			targ = toggle(fn)
		targ_min, targ_max = freq_map.get(targ)
		if cur_min != targ_min or cur_max != targ_max:
			cmd = '/usr/bin/sudo /usr/bin/cpupower frequency-set --min %s --max %s' % (targ_min, targ_max)
			print('+ %s' % cmd)
			subprocess.call(cmd.split())
		time.sleep(2)  # TODO: hard-coded shit
	return 0


if __name__ == '__main__':
	sys.exit(main())
