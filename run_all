#!/usr/bin/python3

'''
Run command on multiple hosts.

Usage:
  run_all [options] <command>
  run_all [options] [--sudo] --script <script>
  run_all [options] --copy-keys

Options:
  -t <tag>       Only consider hosts with <tag>.
  --user=<user>  Username to use for the remote host.
  --pass=<pass>  Password to use for sshpass.
  --interactive  Interactive mode. You have to disconnect manually.
  -p <num>       Number of parallel processes to run.
  --single       Run in single thread - skip tmux at all.
  --sudo         Use sudo on remote system.
  --copy-keys    Copy local ssh keys to remote servers.

Arguments:
  <command>  Command to run.
'''

__version__ = '0.1'

import sys
import docopt
import os
import pwd
import socket
import time
import subprocess
import tmuxp
import re


HOSTS = [
	'admiral.podgorny.cz arch linux podgorny',
	'berta.podgorny.cz arch arm linux podgorny',
	'chuck.podgorny.cz arch linux podgorny',
	'europa.podgorny.cz arch arm linux podgorny router',
	'hubert.asterix.cz arch asterix linux',
	'kulicka.podgorny.cz arch arm linux podgorny',
	'milan.podgorny.cz arch arm linux podgorny',
	'milhouse.podgorny.cz arch linux podgorny sureboot',
	'mrtvola.asterix.cz arch asterix linux',
	'orion.asterix.cz arch asterix linux sureboot',
	'pimiento.podgorny.cz arch linux podgorny',
	'kapitan.podgorny.cz gentoo linux podgorny',
	'pokuston.podgorny.cz arch arm linux podgorny',
	'rpodgorny.podgorny.cz arch linux podgorny',
	'simir.podgorny.cz arch linux podgorny',
	'taurus.asterix.cz arch asterix linux router',
	'ucho.podgorny.cz arch arm linux podgorny',
]

#for i in range(1, 13):
#	HOSTS.append('miner%d.asterix.cz arch asterix linux miner' % i)
#endfor

for i in range(1, 200):
	HOSTS.append('mj%d.asterix.cz asterix atx300 windows' % i)
#endfor

for i in range(1, 1000):
	HOSTS.append('mj%dd.asterix.cz asterix windows' % i)
#endfor


PUB_KEY_FN = os.path.expanduser('~/.ssh/id_ecdsa.pub')
MAX_FORKS = 10
DEBUG = 0


class color:
	PURPLE = '\033[95m'
	CYAN = '\033[96m'
	DARKCYAN = '\033[36m'
	BLUE = '\033[94m'
	GREEN = '\033[92m'
	YELLOW = '\033[93m'
	RED = '\033[91m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'
	END = '\033[0m'
#endclass


def check_pub_key(fn):
	with open(fn, 'r') as f:
		line = f.readline()
	#endwith

	user_and_host = line.split()[-1]
	user, host = user_and_host.split('@')

	if user != pwd.getpwuid(os.getuid())[0]: return False
	if host != socket.gethostname(): return False

	return True
#enddef


def list_window_ids(session):
	ret = []

	t = session.tmux('list-windows')
	for line in t.stdout:
		m = re.search('.*(\@\d+).*', line)
		id_ = m.groups()[0]
		ret.append(id_)
	#endfor

	return ret
#enddef


def main():
	args = docopt.docopt(__doc__, version=__version__)

	if args['--copy-keys'] and not check_pub_key(PUB_KEY_FN):
		raise Exception('i don\'t like the public key')
	#endif

	tag = args['-t']

	hosts = set()
	for i in HOSTS:
		host, *tags = i.split()
		if not tag or tag in tags:
			hosts.add(host)
		#endif
	#endfor

	# TODO: the -t seems to be breaking logins to windows machines - figure shomething out
	#sshopts = '-t -o ConnectTImeout=2'
	sshopts = '-t'

	cmds = {}
	for host in hosts:
		if args['--user']:
			host_full = '%s@%s' % (args['--user'], host)
		else:
			host_full = host
		#endif

		if args['--copy-keys']:
			cmd = 'ssh-copy-id -i %s %s' % (PUB_KEY_FN, host_full)
		elif args['<script>']:
			if args['--sudo']:
				sudo = 'sudo'
			else:
				sudo = ''
			#endif

			tmp_fn = '/tmp/%s' % int(time.time())

			#cmd = 'ssh %s %s \'sh -c "a=`mktemp`; cat >$a; chmod a+x $a; %s $a; rm $a"\' <%s' % (sshopts, host_full, sudo, args['<script>'])
			cmd = 'ssh %s %s "cat >%s; chmod a+x %s; %s %s; rm %s" <%s' % (sshopts, host_full, tmp_fn, tmp_fn, sudo, tmp_fn, tmp_fn, args['<script>'])
			#cmd = 'ssh %s %s "cat >%s; chmod a+x %s; %s %s; rm %s"' % (sshopts, host_full, tmp_fn, tmp_fn, sudo, tmp_fn, tmp_fn)
			#cmd = 'ssh %s %s "cat | %s sh"' % (sshopts, host_full, sudo)
		elif args['<command>']:
			cmd = 'ssh %s %s "%s"' % (sshopts, host_full, args['<command>'].replace('"', '\\"'))
		#endif

		if args['--pass']:
			if not os.path.isfile('/usr/bin/sshpass'):
				raise Exception('/usr/bin/sshpass does not exist')
			#endif

			cmd = '/usr/bin/sshpass -p%s %s' % (args['--pass'], cmd)
		#endif

		cmds[host] = cmd
	#endfor

	if args['--single']:
		total = len(cmds)
		i = 0
		for host in sorted(list(cmds.keys())):
			cmd = cmds[host]
			i += 1
			print('%s(%d/%d) %s%s%s' % (color.YELLOW, i, total, color.BOLD, cmd, color.END))
			subprocess.call(cmd, shell=True)
		#endfor
	else:
		try:
			nprocs = int(args['-p'])
		except:
			nprocs = 10
		#endtry

		sess = tmuxp.Server().list_sessions()[0]
		cmds_to_go = cmds.copy()
		ids = {}
		while 1:
			while len(ids) < nprocs and cmds_to_go:
				host = sorted(list(cmds_to_go.keys()))[0]
				cmd = cmds_to_go[host]
				del cmds_to_go[host]

				w = sess.new_window(attach=False)
				w.rename_window(host)
				print('adding %s %s' % (w._window_id, cmd))
				ids[w._window_id] = w

				if args['--interactive']:
					w.list_panes()[0].send_keys(cmd)
				else:
					w.tmux('respawn-pane', '-k', cmd)
					
					'''
					if args['<script>']:
						data = open(args['<script>'], 'r').read()
						w.list_panes()[0].send_keys(data, enter=False)
						#w.list_panes()[0].send_keys('$\'\\004\'', enter=False)
						#w.list_panes()[0].tmux('send-keys', 'C-d')
					#endif
					'''
				#endif
			#endwhile

			active_ids = list_window_ids(sess)

			for i in ids.copy().keys():
				if not i in active_ids:
					print('removing %s' % i)
					del ids[i]
				#endif
			#endfor

			if not ids and not cmds_to_go: break


			'''
			ws = sess.list_windows()
			for w in wins:
				if not w in ws:
					print('removing %s' % w)
					#w.kill_window()
					wins.remove(w)
				#endif
			#endfor
			'''

			time.sleep(1)
		#endwhile
	#endif
#enddef


if __name__ == '__main__':
	main()
#enddef
