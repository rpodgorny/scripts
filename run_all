#!/usr/bin/python3

'''
Run command on multiple hosts.

Usage:
  run_all [options] <command>
  run_all [options] [--sudo] --script <script>
  run_all [options] --copy-keys

Options:
  -t <tag>                       Only consider hosts with <tag>.
  --user=<user>                  Username to use for the remote host.
  --pass=<pass>                  Password to use for sshpass.
  --no-strict-host-key-checking  Disable ssh host key checking.
  --interactive                  Interactive mode. You have to disconnect manually.
  -p <num>                       Number of parallel processes to run.
  --single                       Run in single thread - skip tmux at all.
  --sudo                         Use sudo on remote system.
  --copy-keys                    Copy local ssh keys to remote servers.

Arguments:
  <command>  Command to run.
'''

__version__ = '0.1'

import sys
import docopt
import os
import pwd
import socket
import time
import subprocess
import re


TMUX = '/usr/bin/tmux'
SSHPASS = '/usr/bin/sshpass'
PUB_KEY_FN = os.path.expanduser('~/.ssh/id_ecdsa.pub')
MAX_FORKS = 10
DEBUG = 0


HOSTS = [
	'admiral.podgorny.cz arch linux podgorny',
	'berta.podgorny.cz arch arm linux podgorny',
	'chuck.podgorny.cz arch linux podgorny',
	'europa.podgorny.cz arch arm linux podgorny router',
	'hubert.asterix.cz arch asterix linux',
	'kulicka.podgorny.cz arch arm linux podgorny',
	'milan.podgorny.cz arch arm linux podgorny',
	'milhouse.podgorny.cz arch linux podgorny sureboot',
	'mrtvola.asterix.cz arch asterix linux',
	'orion.asterix.cz arch asterix linux sureboot',
	'pimiento.podgorny.cz arch linux podgorny',
	'kapitan.podgorny.cz gentoo linux podgorny',
	'pokuston.podgorny.cz arch arm linux podgorny',
	'rpodgorny.podgorny.cz arch linux podgorny',
	'simir.podgorny.cz arch linux podgorny',
	'taurus.asterix.cz arch asterix linux router',
	'ucho.podgorny.cz arch arm linux podgorny',
	'zombie.asterix.cz arch linux asterix',
]

#for i in range(1, 13):
#	HOSTS.append('miner%d.asterix.cz arch asterix linux miner' % i)
#endfor

for i in range(1, 200):
	HOSTS.append('mj%d.asterix.cz asterix atx300 windows' % i)
#endfor

for i in range(1, 1000):
	HOSTS.append('mj%dd.asterix.cz asterix windows' % i)
#endfor


class color:
	PURPLE = '\033[95m'
	CYAN = '\033[96m'
	DARKCYAN = '\033[36m'
	BLUE = '\033[94m'
	GREEN = '\033[92m'
	YELLOW = '\033[93m'
	RED = '\033[91m'
	BOLD = '\033[1m'
	UNDERLINE = '\033[4m'
	END = '\033[0m'
#endclass


def check_pub_key(fn):
	with open(fn, 'r') as f:
		line = f.readline()
	#endwith

	user_and_host = line.split()[-1]
	user, host = user_and_host.split('@')

	if user != pwd.getpwuid(os.getuid())[0]: return False
	if host != socket.gethostname(): return False

	return True
#enddef


def tmux_list_windows():
	ret = []

	res = subprocess.check_output([TMUX, 'list-windows', '-F', '#{window_id} #{pane_dead} #{pane_dead_status}'], universal_newlines=True)

	for line in res.split('\n'):
		if not line: continue

		w_id, pane_dead, *rest = line.split()

		pane_dead = {'0': False, '1': True}[pane_dead]

		# no status is shown for live panes (or when using old version of tmux)
		if rest:
			pane_dead_status = int(rest[0])
		else:
			pane_dead_status = None
		#endif

		ret.append((w_id, pane_dead, pane_dead_status))
	#endfor

	return ret
#enddef


def tmux_new_window(name, cmd=None):
	lst = [TMUX, 'new-window', '-n', name, '-P', '-F', '#{window_id}', '-d']
	if cmd:
		lst.append(cmd)
	#endif
	res = subprocess.check_output(lst, universal_newlines=True)
	return res.split('\n')[0]
#enddef


def tmux_kill_window(w_id):
	res = subprocess.check_call([TMUX, 'kill-window', '-t', ':%s' % w_id], universal_newlines=True)
#enddef


def tmux_send_keys(w_id, cmd, enter=True):
	lst = [TMUX, 'send-keys', '-t', ':%s' % w_id, '-l', cmd]
	if enter:
		lst.extend([';', 'send-keys', '-t', ':%s' % w_id, 'Enter'])
	#endif
	res = subprocess.check_output(lst, universal_newlines=True)
#enddef


def tmux_respawn_pane(w_id, cmd):
	res = subprocess.check_output([TMUX, 'respawn-pane', '-t', ':%s' % w_id, '-k', cmd], universal_newlines=True)
#enddef


def tmux_capture_pane(w_id):
	res = subprocess.check_output([TMUX, 'capture-pane', '-t', ':%s' % w_id, '-p'], universal_newlines=True)
#enddef


def tmux_set_window_option(w_id, option, value):
	# TODO: why is the window_id format different here?
	res = subprocess.check_call([TMUX, 'set-window-option', '-t', '%s' % w_id, option, value], universal_newlines=True)
#enddef


def main():
	args = docopt.docopt(__doc__, version=__version__)

	if args['--copy-keys'] and not check_pub_key(PUB_KEY_FN):
		raise Exception('i don\'t like the public key')
	#endif

	tag = args['-t']

	hosts = set()
	for i in HOSTS:
		host, *tags = i.split()
		if not tag or tag in tags:
			hosts.add(host)
		#endif
	#endfor

	sshopts = ''
	#sshopts += ' -o ConnectTImeout=2'
	# TODO: the -t seems to be breaking logins to windows machines - figure shomething out
	sshopts += '-t'

	if args['--no-strict-host-key-checking']:
		sshopts += ' -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
	#endif

	cmds = {}
	for host in hosts:
		if args['--user']:
			host_full = '%s@%s' % (args['--user'], host)
		else:
			host_full = host
		#endif

		if args['--copy-keys']:
			cmd = 'ssh-copy-id -i %s %s' % (PUB_KEY_FN, host_full)
		elif args['<script>']:
			if args['--sudo']:
				sudo = 'sudo'
			else:
				sudo = ''
			#endif

			tmp_fn = '/tmp/%s' % int(time.time())

			#cmd = 'ssh %s %s \'sh -c "a=`mktemp`; cat >$a; chmod a+x $a; %s $a; rm $a"\' <%s' % (sshopts, host_full, sudo, args['<script>'])
			cmd = 'ssh %s %s "cat >%s; chmod a+x %s; %s %s; rm %s" <%s' % (sshopts, host_full, tmp_fn, tmp_fn, sudo, tmp_fn, tmp_fn, args['<script>'])
			#cmd = 'ssh %s %s "cat >%s; chmod a+x %s; %s %s; rm %s"' % (sshopts, host_full, tmp_fn, tmp_fn, sudo, tmp_fn, tmp_fn)
			#cmd = 'ssh %s %s "cat | %s sh"' % (sshopts, host_full, sudo)
		elif args['<command>']:
			cmd = 'ssh %s %s "%s"' % (sshopts, host_full, args['<command>'].replace('"', '\\"'))
		#endif

		if args['--pass']:
			if not os.path.isfile(SSHPASS):
				raise Exception('%s does not exist' % SSHPASS)
			#endif

			cmd = '%s -p%s %s' % (SSHPASS, args['--pass'], cmd)
		#endif

		cmds[host] = cmd
	#endfor

	exits = {}

	if args['--single']:
		total = len(cmds)
		i = 0
		for host in sorted(list(cmds.keys())):
			cmd = cmds[host]
			i += 1
			print('%s(%d/%d) %s%s%s' % (color.YELLOW, i, total, color.BOLD, cmd, color.END))
			exit_status = subprocess.call(cmd, shell=True)

			if not exit_status in exits: exits[exit_status] = set()
			exits[exit_status].add(host)

			if exit_status == 0:
				col = color.GREEN
			else:
				col = color.RED
			#endif

			print('%s%s -> ret: %d%s' % (col, cmd, exit_status, color.END))
		#endfor
	else:
		if not os.path.isfile(TMUX):
			raise Exception('%s does not exist' % TMUX)
		#endif

		try:
			nprocs = int(args['-p'])
		except:
			nprocs = 10
		#endtry

		cmds_to_go = cmds.copy()
		running = {}
		total = len(cmds_to_go)
		i = 0
		while 1:
			while len(running) < nprocs and cmds_to_go:
				host = sorted(list(cmds_to_go.keys()))[0]
				cmd = cmds_to_go[host]
				del cmds_to_go[host]

				if args['--interactive']:
					w_id = tmux_new_window(host)
					tmux_send_keys(w_id, cmd)
				else:
					w_id = tmux_new_window(host, cmd)
				#endif

				assert w_id

				tmux_set_window_option(w_id, 'set-remain-on-exit', 'on')

				running[w_id] = (host, cmd)

				i += 1
				print('%s(%d/%d) (%s) %s%s' % (color.YELLOW, i, total, w_id, cmd, color.END))

				'''
				if args['--interactive']:
					tmux_send_keys(w_id, cmd)
				else:
					tmux_respawn_pane(w_id, cmd)

					###if args['<script>']:
						data = open(args['<script>'], 'r').read()
						w.list_panes()[0].send_keys(data, enter=False)
						#w.list_panes()[0].send_keys('$\'\\004\'', enter=False)
						#w.list_panes()[0].tmux('send-keys', 'C-d')
					#endif
				#endif
				'''
			#endwhile

			for w_id, is_dead, exit_status in tmux_list_windows():
				if not w_id in running: continue
				if not is_dead: continue

				# TODO: don't kill the window if it's currently open?

				host, cmd = running[w_id]

				if not exit_status in exits: exits[exit_status] = set()
				exits[exit_status].add(host)

				if exit_status is None:
					col = color.YELLOW
					exit_status = 'unknown'  # TODO: not very nice
				elif exit_status == 0:
					col = color.GREEN
				else:
					col = color.RED
				#endif

				print('%s(%s) %s -> ret: %s%s' % (col, w_id, cmd, exit_status, color.END))

				tmux_kill_window(w_id)
				del running[w_id]
			#endfor

			if not running and not cmds_to_go: break

			time.sleep(1)
		#endwhile
	#endif

	rets = []
	for ret in sorted(exits.keys()):
		if ret is None:
			col = color.YELLOW
		elif ret == 0:
			col = color.GREEN
		else:
			col = color.RED
		#endif

		rets.append(' %s%s: %d' % (col, ret, len(exits[ret])))
	#endfor

	print('rets: %s%s' % (', '.join(rets), color.END))
#enddef


if __name__ == '__main__':
	main()
#enddef
